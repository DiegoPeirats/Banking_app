package com.diego_peirats.application.service;

import java.math.BigDecimal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.diego_peirats.application.response.AccountInfo;
import com.diego_peirats.application.response.BankResponse;
import com.diego_peirats.application.response.EmailDetails;
import com.diego_peirats.application.response.TransactionDTO;
import com.diego_peirats.application.utils.AccountUtils;
import com.diego_peirats.domain.entity.User;
import com.diego_peirats.domain.service.UserService;
import com.diego_peirats.infrastructure.repository.UserRepository;
import com.diego_peirats.infrastructure.request.CreditDebitRequest;
import com.diego_peirats.infrastructure.request.EnquiryRequest;
import com.diego_peirats.infrastructure.request.TransferRequest;
import com.diego_peirats.infrastructure.request.UserRequest;

@Service
public class UserServiceImpl implements UserService{
	
	@Autowired
	private UserRepository repository;
	
	@Autowired
	private EmailServiceImpl emailService;
	
	@Autowired
	private TransactionServiceImpl transactionService;
	
	@Autowired
	private PasswordEncoder passwordEncoder;

	@Override
	public BankResponse createAccount(UserRequest request) {
		
		if (repository.existsByEmail(request.getEmail())) {
			return BankResponse.builder()
					.responseCode(AccountUtils.ACCOUNT_EXISTS_CODE)
					.responseMessage(AccountUtils.ACCOUNT_EXISTS_MESSAGE)
					.accountInfo(null)
					.build();
		}

		User user = User.builder()
				.firstName(request.getFirstName())
				.lastName(request.getLastName())
				.otherName(request.getOtherName())
				.gender(request.getGender())
				.address(request.getAddress())
				.stateOfOrigin(request.getStateOfOrigin())
				.accountNumber(AccountUtils.generateAccountNumber())
				.accountBalance(BigDecimal.ZERO)
				.email(request.getEmail())
				.password(passwordEncoder.encode(request.getPassword()))
				.phoneNumber(request.getPhoneNumber())
				.status("ACTIVE")
				.build();
		
		User savedUser = repository.save(user);
		
		EmailDetails emailDetails = EmailDetails.builder()
				.recipient(savedUser.getEmail())
				.subject("ACCOUNT CREATION")
				.messageBody("Congratulations! your account has been created")
				.attachment(null)
				.build();
		
		emailService.sendEmailAlert(emailDetails);
		
		return BankResponse.builder()
				.responseCode(AccountUtils.ACCOUNT_CREATION_SUCCESS)
				.responseMessage(AccountUtils.ACCOUNT_CREATION_MESSAGE)
				.accountInfo(AccountInfo.builder()
						.accountBalance(savedUser.getAccountBalance())
						.accountName(savedUser.getFirstName() + " "
								+ savedUser.getLastName() + " " + savedUser.getOtherName())
						.accountNumber(savedUser.getAccountNumber())
						.build())
				.build();
	}

	@Override
	public BankResponse balanceEnquiry(EnquiryRequest request) {

		boolean accountExists = repository.existsByAccountNumber(request.getAccountNumber());
		
		if (!accountExists) {
			return BankResponse.builder()
					.responseCode(AccountUtils.ACCOUNT_NOT_EXIST_CODE)
					.responseMessage(AccountUtils.ACCOUNT_NOT_EXIST_MESSAGE)
					.accountInfo(null)
					.build();
		}
		User foundUser = repository.findByAccountNumber(request.getAccountNumber());
		
		return BankResponse.builder()
				.responseCode(AccountUtils.ACCOUNT_FOUND_CODE)
				.responseMessage(AccountUtils.ACCOUNT_FOUND_SUCCESS)
				.accountInfo(AccountInfo.builder()
						.accountBalance(foundUser.getAccountBalance())
						.accountNumber(request.getAccountNumber())
						.accountName(foundUser.getFirstName() + " " + foundUser.getLastName() + " " + foundUser.getOtherName())
						.build())
				.build();
	}

	@Override
	public String nameEnquiry(EnquiryRequest request) {
		boolean accountExists = repository.existsByAccountNumber(request.getAccountNumber());
		
		if (!accountExists) {
			return AccountUtils.ACCOUNT_NOT_EXIST_MESSAGE;
		}
		User foundUser = repository.findByAccountNumber(request.getAccountNumber());
		return foundUser.getFirstName() + " " + foundUser.getLastName();
		
	}

	@Override
	public BankResponse creditAccount(CreditDebitRequest request) {
		boolean accountExists = repository.existsByAccountNumber(request.getAccountNumber());
		
		if (!accountExists) {
			return BankResponse.builder()
					.responseCode(AccountUtils.ACCOUNT_NOT_EXIST_CODE)
					.responseMessage(AccountUtils.ACCOUNT_NOT_EXIST_MESSAGE)
					.accountInfo(null)
					.build();
		}
		
		User userToCredit = repository.findByAccountNumber(request.getAccountNumber());
		userToCredit.setAccountBalance(userToCredit.getAccountBalance().add(request.getAmount()));
		
		repository.save(userToCredit);
		
		TransactionDTO transaction = TransactionDTO.builder()
				.accountNumber(userToCredit.getAccountNumber())
				.transactionType("CREDIT")
				.amount(request.getAmount())
				.build();
		
		transactionService.saveTransaction(transaction);
		
		return BankResponse.builder()
				.responseCode(AccountUtils.ACCOUNT_CREDITED_SUCCESS)
				.responseMessage(AccountUtils.ACCOUNT_CREDITED_SUCCESS_MESSAGE)
				.accountInfo(AccountInfo.builder()
						.accountName(userToCredit.getFirstName()
								+ " " + userToCredit.getLastName())
						.accountBalance(userToCredit.getAccountBalance())
						.accountNumber(request.getAccountNumber())
						.build())
				.build();
	}

	@Override
	public BankResponse debitAccount(CreditDebitRequest request) {
		boolean accountExists = repository.existsByAccountNumber(request.getAccountNumber());
		
		if (!accountExists) {
			return BankResponse.builder()
					.responseCode(AccountUtils.ACCOUNT_NOT_EXIST_CODE)
					.responseMessage(AccountUtils.ACCOUNT_NOT_EXIST_MESSAGE)
					.accountInfo(null)
					.build();
		}
		
		User userToDebit = repository.findByAccountNumber(request.getAccountNumber());
		if (userToDebit.getAccountBalance().subtract(request.getAmount()).compareTo(BigDecimal.ZERO) < 0) {
			return BankResponse.builder()
					.responseCode(AccountUtils.INSUFFICIENT_BALANCE_CODE)
					.responseMessage(AccountUtils.INSUFFICIENT_BALANCE_MESSAGE)
					.accountInfo(AccountInfo.builder()
							.accountName(userToDebit.getFirstName()
									+ " " + userToDebit.getLastName())
							.accountBalance(userToDebit.getAccountBalance())
							.accountNumber(request.getAccountNumber())
							.build())
					.build();
		}

		userToDebit.setAccountBalance(userToDebit.getAccountBalance().subtract(request.getAmount()));
		repository.save(userToDebit);
		
		TransactionDTO transaction = TransactionDTO.builder()
				.accountNumber(userToDebit.getAccountNumber())
				.transactionType("DEBIT")
				.amount(request.getAmount())
				.build();
		
		transactionService.saveTransaction(transaction);
		
		return BankResponse.builder()
				.responseCode(AccountUtils.ACCOUNT_DEBITED_SUCCESS)
				.responseMessage(AccountUtils.DEBITED_SUCCESS_MESSAGE)
				.accountInfo(AccountInfo.builder()
						.accountName(userToDebit.getFirstName()
								+ " " + userToDebit.getLastName())
						.accountBalance(userToDebit.getAccountBalance())
						.accountNumber(request.getAccountNumber())
						.build())
				.build();
	}

	@Override
	public BankResponse transfer(TransferRequest request) {
		boolean destinationAccountExists = repository.existsByAccountNumber(request.getDestinationAccountNumber());
		
		if (!destinationAccountExists) {
			return BankResponse.builder()
					.responseCode(AccountUtils.ACCOUNT_NOT_EXIST_CODE)
					.responseMessage(AccountUtils.ACCOUNT_NOT_EXIST_MESSAGE)
					.accountInfo(null)
					.build();
		}
		
		User sourceAccount = repository.findByAccountNumber(request.getSourceAccountNumber());
		User destinationAccount = repository.findByAccountNumber(request.getDestinationAccountNumber());
		
		if (sourceAccount.getAccountBalance().subtract(request.getAmount()).compareTo(BigDecimal.ZERO) < 0) {
			return BankResponse.builder()
					.responseCode(AccountUtils.INSUFFICIENT_BALANCE_CODE)
					.responseMessage(AccountUtils.INSUFFICIENT_BALANCE_MESSAGE)
					.accountInfo(AccountInfo.builder()
							.accountName(sourceAccount.getFirstName()
									+ " " + sourceAccount.getLastName())
							.accountBalance(sourceAccount.getAccountBalance())
							.accountNumber(request.getSourceAccountNumber())
							.build())
					.build();
			
		}

		sourceAccount.setAccountBalance(sourceAccount.getAccountBalance().subtract(request.getAmount()));
		repository.save(sourceAccount);
		EmailDetails debitAlert = EmailDetails.builder()
				.subject("DEBIT ALERT")
				.recipient(sourceAccount.getEmail())
				.messageBody(request.getAmount() + " has been deducted from your account")
				.build();
		emailService.sendEmailAlert(debitAlert);
		
		TransactionDTO transaction1 = TransactionDTO.builder()
				.accountNumber(sourceAccount.getAccountNumber())
				.transactionType("DEBIT")
				.amount(request.getAmount())
				.build();
		
		transactionService.saveTransaction(transaction1);
		
		destinationAccount.setAccountBalance(destinationAccount.getAccountBalance().add(request.getAmount()));
		repository.save(destinationAccount);
		EmailDetails creditAlert = EmailDetails.builder()
				.subject("DEBIT ALERT")
				.recipient(destinationAccount.getEmail())
				.messageBody(request.getAmount() + " has been added from your account")
				.build();
		emailService.sendEmailAlert(creditAlert);
		
		TransactionDTO transaction2 = TransactionDTO.builder()
				.accountNumber(destinationAccount.getAccountNumber())
				.transactionType("CREDIT")
				.amount(request.getAmount())
				.build();
		
		transactionService.saveTransaction(transaction2);
		
		return BankResponse.builder()
				.responseCode(AccountUtils.ACCOUNT_DEBITED_SUCCESS)
				.responseMessage(AccountUtils.DEBITED_SUCCESS_MESSAGE)
				.accountInfo(AccountInfo.builder()
						.accountName(sourceAccount.getFirstName()
								+ " " + sourceAccount.getLastName())
						.accountBalance(sourceAccount.getAccountBalance())
						.accountNumber(request.getSourceAccountNumber())
						.build())
				.build();
	}

}
